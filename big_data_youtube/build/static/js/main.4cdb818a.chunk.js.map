{"version":3,"sources":["components/Search.js","components/layout/header.js","App.js","serviceWorker.js","index.js"],"names":["Search","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","search","onSubmit","e","preventDefault","props","title","setState","onChange","target","value","inherits","createClass","key","react_default","a","createElement","style","display","flexDirection","width","margin","type","name","placeholder","flex","padding","fontSize","marginBottom","className","Component","headerStyle","background","color","textAlign","paddingTop","height","Header","App","todos","axios","get","then","res","data","_this2","react_router_dom","header","react_router","exact","path","render","Fragment","components_Search","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mPA2CeA,EAxCf,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,GAAA,QAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAAJ,IAAAe,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MACEQ,MAAQ,CACNC,OAAQ,IAFZhB,EAKEiB,SAAW,SAACC,GACVA,EAAEC,iBACFnB,EAAKoB,MAAMJ,OAAOhB,EAAKe,MAAMM,OAC7BrB,EAAKsB,SAAS,KARlBtB,EAWEuB,SAAW,SAACL,GAAD,OAAOlB,EAAKsB,SAAS,CAAEN,OAAQE,EAAEM,OAAOC,SAXrDzB,EAAA,OAAAC,OAAAyB,EAAA,EAAAzB,CAAAJ,EAAAC,GAAAG,OAAA0B,EAAA,EAAA1B,CAAAJ,EAAA,EAAA+B,IAAA,SAAAH,MAAA,WAcI,OACEI,EAAAC,EAAAC,cAAA,QAAMd,SAAUd,KAAKc,SAAUe,MAAO,CAAEC,QAAS,OAAQC,cAAe,SAAUC,MAAO,MAAOC,OAAQ,SACtGP,EAAAC,EAAAC,cAAA,SACEM,KAAK,OACLC,KAAK,QACLC,YAAY,mBACZP,MAAO,CAAEQ,KAAK,KAAMC,QAAS,MAAOC,SAAU,OAAQC,aAAc,QACpElB,MAAOtB,KAAKY,MAAMM,MAClBE,SAAUpB,KAAKoB,WAEjBM,EAAAC,EAAAC,cAAA,SACEM,KAAK,SACLZ,MAAM,SACNmB,UAAU,MACVZ,MAAO,CAACQ,KAAM,IAAKE,SAAU,OAAQP,MAAO,MAAOC,OAAQ,eA5BrEvC,EAAA,CAA4BgD,aCO5B,IAAMC,EAAc,CAChBC,WAAY,qBACZC,MAAO,iBACPC,UAAW,SACXC,WAAY,OACZC,OAAQ,QACRT,SAAU,OACVC,aAAc,QAKHS,EApBf,WACC,OACCvB,EAAAC,EAAAC,cAAA,UAAQC,MAAOc,GACdjB,EAAAC,EAAAC,cAAA,uDC+BYsB,oNA5BbtC,MAAQ,CACNuC,MAAO,MAITtC,OAAS,WACPuC,IAAMC,IAAI,8CACPC,KAAK,SAAAC,GAAG,OAAI1D,EAAKsB,SAAS,CAAEgC,MAAOI,EAAIC,kFAGnC,IAAAC,EAAAzD,KACP,OACE0B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KACEhC,EAAAC,EAAAC,cAAA,OAAKa,UAAU,OACbf,EAAAC,EAAAC,cAAA,OAAKa,UAAU,aACbf,EAAAC,EAAAC,cAAC+B,EAAD,MACAjC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAAA9C,GAAK,OACjCS,EAAAC,EAAAC,cAACF,EAAAC,EAAMqC,SAAP,KACEtC,EAAAC,EAAAC,cAACqC,EAAD,CAAQpD,OAAQ4C,EAAK5C,uBAnBnB6B,cCKEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASR,OAAOrC,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.4cdb818a.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport class Search extends Component {\n  state = {\n    search: ''\n  }\n\n  onSubmit = (e) => {\n    e.preventDefault();\n    this.props.search(this.state.title);\n    this.setState({  });\n  }\n\n  onChange = (e) => this.setState({ search: e.target.value });\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit} style={{ display: 'flex', flexDirection: 'column', width: '50%', margin: 'auto'}}>\n        <input \n          type=\"text\" \n          name=\"title\" \n          placeholder=\"Enter Keyword...\" \n          style={{ flex:'10', padding: '5px', fontSize: '17px', marginBottom: '25px'}}\n          value={this.state.title}\n          onChange={this.onChange}\n        />\n        <input \n          type=\"submit\" \n          value=\"Search\" \n          className=\"btn\"\n          style={{flex: '1', fontSize: '17px', width: '35%', margin: 'auto'}}\n        />\n      </form>\n    )\n  }\n}\n\n// PropTypes\nSearch.propTypes = {\n  search: PropTypes.func.isRequired\n}\n\nexport default Search;","import React from 'react';\n\nfunction Header() {\n\treturn (\n\t\t<header style={headerStyle}>\n\t\t\t<h1>YouTube Caption Search</h1>\n\t\t</header>\n\t)\n}\n\nconst headerStyle = {\n    background: 'rgb(255, 255, 255)',\n    color: 'rgb(255, 0, 0)',\n    textAlign: 'center',\n    paddingTop: '35px',\n    height: '125px',\n    fontSize: '20px',\n    marginBottom: '23px'\n}\n\n\n\nexport default Header;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Search from './components/Search';\nimport Header from './components/layout/header';\nimport axios from 'axios';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    todos: []\n  }\n\n\n  search = () => {\n    axios.get('https://jsonplaceholder.typicode.com/todos')\n      .then(res => this.setState({ todos: res.data }))\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <Route exact path=\"/\" render={props => (\n              <React.Fragment>\n                <Search search={this.search}/>\n              </React.Fragment>\n            )} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}